// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

// Â© Seatrips

//@version=5

indicator("Colored Candles, Long and Short, Bullish and Bearish, S&R Feb-2023", shorttitle="C", overlay=true)

lengthInput = input.int(150, "Length", minval = 2)

// Determine variables 

hi = ta.sma(high, lengthInput)
lo = ta.sma(low, lengthInput)
cl = ta.sma(close, lengthInput) 
op = ta.sma(open, lengthInput) 

// Source

src = input(close, title='Source')

// Lenght

len10 = input.int(10, title='EMA 10 Length')
len20 = input.int(20, title='SMA 20 Length')
len50 = input.int(50, title='SMA 50 Length')
len200 = input.int(200, title='SMA 200 Length')

// Define MA Periods

ema10 = ta.ema(close, 10)
sma20 = ta.sma(close, 20)
sma50 = ta.sma(close, 50)
sma200 = ta.sma(close, 200)

out10 = ta.ema(src, len10)
up10 = out10 > out10[1]
down10 = out10 < out10[1]
mycolor10 = up10 ? color.rgb(82, 171, 244) : down10 ? color.rgb(188, 222, 251) : na

out20 = ta.ema(src, len20)
up20 = out20 > out20[1]
down20 = out20 < out20[1]
mycolor20 = up20 ? color.rgb(246, 3, 209) : down20 ? color.rgb(249, 190, 243) : na

out50 = ta.ema(src, len50)
up50 = out50 > out50[1]
down50 = out50 < out50[1]
mycolor50 = up50 ? color.rgb(186, 72, 81) : down50 ? color.rgb(223, 98, 109) : na

out200 = ta.ema(src, len200)
up200 = out200 > out200[1]
down200 = out200 < out200[1]
mycolor200 = up200 ? color.rgb(38, 72, 157) : down200 ? color.rgb(76, 122, 238) : na

// Calculate support and resistance levels

resistance = ta.highest(high, lengthInput)
support = ta.lowest(low, lengthInput)

// lenght Support Resistance

lenresistance = input.int(90, minval=60,title='RESISTANCE length')
lensupport = input.int(90, minval=60, title='SUPPORT length')

// Define the fast and slow moving average periods

fast_period = input(title="Fast Line Period", defval=10)
slow_period = input(title="Slow Line Period", defval=50)

// Calculate the fast and slow lines

fast_line = ta.sma(close, fast_period)
slow_line = ta.sma(close, slow_period)

// Highest and Lowest

lowest = ta.lowest(lo, lengthInput)
highest = ta.highest(hi, lengthInput)

// BB

lengthbb = input.int(34, minval=1)
mult = input.float(2.0, minval=0.001, maxval=50)

mid = ta.sma(src, lengthbb)
dev = ta.stdev(src, lengthbb)
dev2 = mult * dev

upper1 = mid + dev
lower1 = mid - dev
upper2 = mid + dev2
lower2 = mid - dev2

// Plot or Not

ema10plot = input (defval = true, title="Show EMA10 on chart")
sma20plot = input (defval = true, title="Show sma20 on chart")
sma50plot = input (defval = false, title="Show sma50 on chart")
sma200plot = input (defval = false, title="Show sma200 on chart")
highestplot = input(defval = false, title="Plot Highest on the chart")
lowestplot = input(defval = false, title="Plot Lowest on the chart")
resistanceplot = input(defval = false, title="Plot Resistance on chart")
supportplot = input(defval = false, title="Plot Support on chart")
fast_lineplot = input(defval = false, title="Plot FastLine on chart")
slow_lineplot = input(defval = false, title="Plot SlowLine on chart")

// bools for ribbon 

bool closeabove = close >= cl 
bool closebelow = close <= cl 
bool highabove = high >= hi 
bool lowabove = low >= lo 
bool openabove = open >= op 

// bools for highest/lowest 

bool paabovehigh = close > highest 
bool pabelowlow = close < lowest 
bool middle = close >= lo and close <= hi

// Colours 

color bull = color.rgb(52, 120, 54)
color bear = color.rgb(244, 134, 143)
color neutral = color.rgb(244, 134, 143)
color deepbear = color.rgb(185, 7, 7)
color deepbull = color.rgb(10, 241, 10)
color standard = color.rgb(52, 120, 54)

// Determine Colour 

color hicolor = highabove ? bull : bear 
color locolor = lowabove ? bull : bear 
color opcolor = openabove ? bull : bear 
color clcolor = closeabove ? bull : bear 
color lowestcolor = pabelowlow ? deepbear : standard
color highestcolor = paabovehigh ? deepbull : neutral

// Confirmation Candle close

confirmOpenL = close >= open
confirmOpenS = close <= open

// Define Long and Short to signal once

var isLong = false
var isShort = false

// Long

long = not isLong and (close > hi)

// Short

short = not isShort and (close < lo)

if (long)
    isLong := true
    isShort := false

if (short)
    isLong := false
    isShort := true

// Determine Colour 

yeslong = closeabove and not long
yesshort = closebelow and not short

// Define Candle Colors

color candlecolor = yeslong and not (close > highest) ? bull : yesshort and not (close < lowest) ? bear : middle ? neutral : long and not (close > highest) ? standard : short and not (close < lowest) ? neutral : close > highest and (close > slow_line) ? deepbull : close < lowest and (close < slow_line) ? deepbear : color.white

// Set Bar colors

barcolor(candlecolor)

// BackGround color

xUp = close > highest
xDn = close < lowest
xNotUpandDn = not xUp and not xDn

bgcolor(xUp ? color.new(color.lime, 97) : xDn ? color.new(#fb4040, 95) : xNotUpandDn ? color.new(color.gray, 96) : na)

// BB

pU1 = plot(upper1, color=color.new(#4caf4f, 96), style=plot.style_circles, title = "BB:)")
pU2 = plot(upper2, color=color.new(#4caf4f, 0), title = "UpperBB:)")
pL1 = plot(lower1, color=color.new(#ff5252, 96), style=plot.style_circles, title = "BB:)")
pL2 = plot(lower2, color=color.new(#ff5252, 0), title = "LowerBB:)")

colorMid = src >= mid ? color.rgb(76, 175, 79, 100) : color.rgb(255, 153, 0, 100)
pB = plot(mid, linewidth=2, color=colorMid, title = "Mid:)")
fill(pB, pU2, color=color.new(#4caf4f, 100))
fill(pU1, pU2, color=color.new(color.green, 80))
fill(pB, pL2, color=color.new(#ff5252, 100))
fill(pL1, pL2, color=color.new(color.red, 80))

// Sentiment signals

length = input.int(defval=90, title='Look-back Window', minval=1)

// initialize red and green candles counters

count_green = 0
count_red = 0

// Count green and red candles

for i = 0 to length - 1 by 1
    if open[i] < close[i]
        count_green := count_green + 1
        count_green
    if open[i] > close[i]
        count_red := count_red + 1
        count_red

// Calcule percentages of green and red candles within the lookback window

green_perc = count_green / length * 100
red_perc = count_red / length * 100

// Define AboveH and BelowL to signal once

var isHighest = false
var isLowest = false

// Above

AboveH = not isHighest and close > highest and green_perc > 41.1 and close > ema10 and ema10 > sma20

// Below

BelowL = not isLowest and close < lowest and red_perc > 41.1 and close < ema10 and ema10 < sma20

if (AboveH)
    isHighest := true
    isLowest := false

if (BelowL)
    isHighest := false
    isLowest := true

// MA Plots

plot(out10 and ema10plot ? out10 : na, title="EMA10", color=mycolor10, linewidth = 2)
plot(out20 and sma20plot ? out20 : na, title="SMA20", color=mycolor20, linewidth = 2)
plot(out50 and sma50plot ? out50 : na, title="SMA50", color=mycolor50, style = plot.style_circles, linewidth = 2)
plot(out200 and sma200plot ? out200 : na, title="SMA200", color=mycolor200, style = plot.style_circles, linewidth = 2)

// Band Plots 

plot(lowest and lowestplot ? lowest : na, "RorS", color = lowestcolor, linewidth=3)
plot(highest and highestplot ? highest : na, "RorS", color = highestcolor, linewidth=3)

// Fast and Slow Line Plot

plot(fast_line and fast_lineplot ? fast_line : na, color = fast_line > slow_line ? color.rgb(5, 251, 13) : fast_line < slow_line ? color.rgb(250, 4, 4) : na, linewidth=1)
plot(slow_line and slow_lineplot ? slow_line : na, color = fast_line > slow_line ? color.rgb(37, 159, 41) : fast_line < slow_line ? color.rgb(173, 50, 50) : na, linewidth=1)

// Plot support and resistance

plot(resistance and resistanceplot ? resistance : na, color=color.new(#b2d3f3, 0), title='resistance', linewidth=1)
plot(support and supportplot ? support : na, color=color.new(#575786, 0), title='support', linewidth=1)

// Plot Signal and Make Alertcondition

plotshape(AboveH and confirmOpenL, color=color.rgb(10, 241, 10), style=shape.arrowup, size=size.large, textcolor=color.rgb(10, 241, 10), title="BULLISH", text="BULLISH", location=location.belowbar)
plotshape(BelowL and confirmOpenS, color=color.rgb(173, 50, 50), style=shape.arrowdown, size=size.large, textcolor=color.rgb(173, 50, 50), title="BEARISH", text="BEARISH", location=location.abovebar)

alertcondition(AboveH and confirmOpenL, title="BULLISH", message="Price is Above the High Main Signal Line")
alertcondition(BelowL and confirmOpenS, title="BEARISH", message="Price is Below the Low Main Signal Line")

// Plot Signal and Make Alertcondition

plotshape(long and confirmOpenL, color=color.rgb(52, 120, 54), style=shape.arrowup, textcolor=color.rgb(52, 120, 54), title="Buy Signal", text="LONG", location=location.belowbar)
plotshape(short and confirmOpenS, color=color.rgb(244, 134, 143), style=shape.arrowdown, textcolor=color.rgb(244, 134, 143), title="Sell Signal", text="SHORT", location=location.abovebar)

alertcondition(long and confirmOpenL, title="Buy Signal Alert", message="A buy signal has been detected and to be more safe you better wait for next candle confirmation.Check slope of moving averages")
alertcondition(short and confirmOpenS, title="Sell Signal Alert", message="A sell signal has been detected and to be more safe you better wait for next candle confirmation.Check slope of moving averages")

