// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

// Â© Seatrips

//@version=5

indicator("FDS Rev 6 Feb-2023", shorttitle="FDS", overlay=true)

lengthInput = input.int(150, "Length", minval = 2)

// Determine variables 

hi = ta.sma(high, lengthInput)
lo = ta.sma(low, lengthInput)
cl = ta.sma(close, lengthInput) 
op = ta.sma(open, lengthInput) 

// Roc add

roc = ((close - close[13]) / close[13]) * 100

// Lowest vs highest

lowest = ta.lowest(lo, lengthInput)
highest = ta.highest(hi, lengthInput)

// bools for ribbon 

bool closeabove = close >= cl 
bool closebelow = close <= cl 
bool highabove = high >= hi 
bool lowabove = low >= lo 
bool openabove = open >= op 

// bools for highest/lowest 

bool paabovehigh = close > highest 
bool pabelowlow = close < lowest 
bool middle = close >= lo and close <= hi

// Colours 

color bull = color.rgb(52, 120, 54)
color bear = color.rgb(244, 134, 143)
color neutral = color.rgb(244, 134, 143)
color deepbear = color.rgb(185, 7, 7)
color deepbull = color.rgb(10, 241, 10)
color standard = color.rgb(52, 120, 54)
color fillcolorbull = color.new(color.green, 88)
color fillcolorbear = color.new(color.red, 88)
color fillcolorneutral = color.new(color.gray, 88)

// Determine Colour 

color hicolor = highabove ? bull : bear 
color locolor = lowabove ? bull : bear 
color opcolor = openabove ? bull : bear 
color clcolor = closeabove ? bull : bear 
color lowestcolor = pabelowlow ? deepbear : standard
color highestcolor = paabovehigh ? deepbull : neutral
color fillfinal = closeabove ? fillcolorbull : closebelow ? fillcolorbear : middle ? fillcolorneutral : na 

// Band Plots 

plot(lowest, "RorS", color = lowestcolor, linewidth=2)
plot(highest, "RorS", color = highestcolor, linewidth=2)

// Confirmation Candle close

confirmOpenL = close >= open
confirmOpenS = close <= open

// Define Long and Short to signal once

var isLong = false
var isShort = false

// Long

long = not isLong and (close > hi) and (roc > 0 and close[1] < close ? 1 : 0)

// Short

short = not isShort and (close < lo) and (roc < 0 and close[1] > close ? 1 : 0)

if (long)
    isLong := true
    isShort := false

if (short)
    isLong := false
    isShort := true

src = input(close, title='Source')

len8 = input.int(10, title='EMA 8 Length')
len10 = input.int(10, title='EMA 10 Length')
len12 = input.int(12, title='EMA 12 Length')
len20 = input.int(20, title='SMA 20 Length')
len34 = input.int(34, title='EMA 34 Length')
len50 = input.int(50, title='SMA 50 Length')
len200 = input.int(200, title='SMA 200 Length')

out8 = ta.ema(src, len8)
out10 = ta.ema(src, len10)
out12 = ta.ema(src, len12)
out20 = ta.sma(src, len20)
out34 = ta.ema(src, len34)
out50 = ta.sma(src, len50)
out200 = ta.sma(src, len200)

// Compare the current values of each SMA to its previous value and create a signal that shows whether the slope of each SMA is going up or going down

ema10 = ta.ema(close, 10)
sma20 = ta.sma(close, 20)
ema34 = ta.ema(close, 34)
sma50 = ta.sma(close, 50)
sma200 = ta.sma(close, 200)

// Create variables to store the previous values of each SMA

prev_ema10 = ema10[1]
prev_sma20 = sma20[1]
prev_ema34 = ema34[1]
prev_sma50 = sma50[1]
prev_sma200 = sma200[1]

// Plot MA's

up10 = out10 > out8[1]
down10 = out10 < out8[1]
mycolor10 = up10 ? color.rgb(82, 171, 244) : down10 ? color.rgb(188, 222, 251) : na
plot(out10 and ema10 ? out10 :na, title="EMA10", color=mycolor10, linewidth = 1)

up20 = out20 > out12[1]
down20 = out20 < out12[1]
mycolor20 = down20 ? color.rgb(250, 2, 213) : up20 ? color.rgb(242, 158, 230) : na
plot(out20 and sma20 ? out20 :na, title="SMA20", color=mycolor20, linewidth = 1)

up34 = out34 > out20[1]
down34 = out34 < out20[1]
mycolor34 = down34 ? color.rgb(250, 155, 2) : up34 ? color.rgb(243, 190, 126) : na
plot(out34 and ema34 ? out34 :na, title="ema34", color=mycolor34, linewidth = 1)

up50 = out50 > out34[1]
down50 = out50 < out34[1]
mycolor50 = down50 ? color.rgb(186, 72, 81) : up50 ? color.rgb(223, 98, 109) : na
plot(out50 and sma50 ? out50 :na, title="SMA50", color=mycolor50, style = plot.style_circles, linewidth = 2)

up200 = out200 > out50[1]
down200 = out200 < out50[1]
mycolor200 = down200 ? color.rgb(38, 72, 157) : up200 ? color.rgb(76, 122, 238) : na
plot(out200 and sma200 ? out200 :na, title="SMA200", color=mycolor200, style = plot.style_circles, linewidth = 2)

// Determine Colour 

yeslong = closeabove and not long
yesshort = closebelow and not short

color candlecolor = yeslong and not (close > highest) ? bull : yesshort and not (close < lowest) ? bear : middle ? neutral : long and not (close > highest) ? standard : short and not (close < lowest) ? neutral : close > highest ? deepbull : close < lowest ? deepbear : color.blue

// Set candle colors

barcolor(candlecolor)

// Plot Signal and Make Alertcondition

plotshape(long and confirmOpenL, color=color.rgb(10, 241, 10), style=shape.arrowup, textcolor=color.rgb(10, 241, 10), title="Buy Signal", text="LONG", location=location.belowbar)
plotshape(short and confirmOpenS, color=color.rgb(231, 8, 8), style=shape.arrowdown, textcolor=color.rgb(231, 8, 8), title="Sell Signal", text="SHORT", location=location.abovebar)

alertcondition(long and confirmOpenL, title="Buy Signal Alert", message="A buy signal has been detected and to be more safe you better wait for next candle confirmation.Check slope of moving averages")
alertcondition(short and confirmOpenS, title="Sell Signal Alert", message="A sell signal has been detected and to be more safe you better wait for next candle confirmation.Check slope of moving averages")

// Define AboveH and BelowL to signal once

var isHighest = false
var isLowest = false

// Above

AboveH = not isHighest and close > highest

// Below

BelowL = not isLowest and close < lowest

if (AboveH)
    isHighest := true
    isLowest := false

if (BelowL)
    isHighest := false
    isLowest := true

// Plot Signal and Make Alertcondition

plotshape(AboveH and confirmOpenL, color=color.rgb(5, 243, 243), style=shape.arrowup, size=size.large, textcolor=color.rgb(5, 243, 243), title="BULLISH", text="BULLISH", location=location.belowbar)
plotshape(BelowL and confirmOpenS, color=color.rgb(212, 3, 249), style=shape.arrowdown, size=size.large, textcolor=color.rgb(215, 4, 252), title="BEARISH", text="BEARISH", location=location.abovebar)

alertcondition(AboveH and confirmOpenL, title="BULLISH", message="Price is Above the High Main Main Signal Line")
alertcondition(BelowL and confirmOpenS, title="BEARISH", message="Price is Below the Low Main Signal Line")

// Calculate support and resistance levels

resistance = ta.highest(high, lengthInput)
support = ta.lowest(low, lengthInput)

// lenght Support Resistance

lenresistance = input.int(90, minval=60,title='RESISTANCE length')
lensupport = input.int(90, minval=60, title='SUPPORT length')

// Plot support and resistance

plot(resistance, color=color.new(#78b6f4, 0), title='resistance', linewidth=1)
plot(support, color=color.new(#7777eb, 0), title='support', linewidth=1)

// Sentiment signals

length = input.int(defval=50, title='Look-back Window', minval=1)

// Define extreme sentiment level above which reveral is expected 

extreme_sentiment = input.float( defval=61.5, title="Extreme Sentiment Level")

// initialize red and green candles counters

count_green = 0
count_red = 0

// Count green and red candles

for i = 0 to length - 1 by 1
    if open[i] < close[i]
        count_green := count_green + 1
        count_green
    if open[i] > close[i]
        count_red := count_red + 1
        count_red

// Calcule percentages of green and rend candles within the lookback window

green_perc = count_green / length * 100
red_perc = count_red / length * 100

// Define extreme sentiment conditions

extreme_bullish = ta.crossover(green_perc, 61.8)
extreme_bearish = ta.crossover(red_perc, 61.8)

// Plot labels with signal messages

plotshape(extreme_bullish and ta.barssince(extreme_bullish[1]) > 20 ? green_perc : na, style=shape.arrowdown, text='RE', location=location.abovebar, size=size.large, textcolor=color.new(#05b5f0, 0))
plotshape(extreme_bearish and ta.barssince(extreme_bearish[1]) > 20 ? red_perc : na, style=shape.arrowup, text='RE', location=location.belowbar, size=size.large, textcolor=color.new(#05b5f0, 0))



// Pot MA's

src = input(close, title='Source')

len8 = input.int(10, title='EMA 8 Length')
len10 = input.int(10, title='EMA 10 Length')
len12 = input.int(12, title='EMA 12 Length')
len20 = input.int(20, title='SMA 20 Length')

ema10plot = input (true, title="Show EMA10 on chart")
sma20plot = input (true, title="Show SMA20 on chart")

out8 = ta.ema(src, len8)
out10 = ta.ema(src, len10)
out12 = ta.sma(src, len12)
out20 = ta.sma(src, len20)

up20 = out20 > out12[1]
down20 = out20 < out12[1]
mycolor20 = down20 ? color.rgb(250, 2, 213) : up20 ? color.rgb(242, 158, 230) : na
plot(out20 and sma20plot ? out20 :na, title="SMA20", color=mycolor20, linewidth = 1)

//EMA 10
up10 = out10 > out8[1]
down10 = out10 < out8[1]
mycolor10 = up10 ? color.rgb(82, 171, 244) : down10 ? color.rgb(188, 222, 251) : na
plot(out10 and ema10plot ? out10 :na, title="EMA10", color=mycolor10, linewidth = 1)


